<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:amq="http://activemq.apache.org/schema/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="	
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd 
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-lazy-init="false">

	<context:annotation-config />

	<context:property-placeholder location="classpath:rabbitmq.properties" />

	<!-- 共通bean start -->
	<bean name="rabbitNativeConnectionFactory" class="com.rabbitmq.client.ConnectionFactory">
		<property name="host" value="${rabbitmq.hosts}" />
		<property name="port" value="${rabbitmq.port}" />
		<property name="username" value="${rabbitmq.userName}" />
		<property name="password" value="${rabbitmq.password}" />
		<property name="virtualHost" value="${rabbitmq.virtualHost}" />
		<property name="automaticRecoveryEnabled" value="true" />
		<property name="networkRecoveryInterval" value="10000" />
	</bean>

	<bean name="rabbitMQConnectionFactory" class="com.service.mq.rabbitmq.connection.RabbitMQConnectionFactory">
		<property name="connectionFactory" ref="rabbitNativeConnectionFactory" />
	</bean>

	<bean name="rabbitMQChannelFactory"	class="com.service.mq.rabbitmq.channel.RabbitMQChannelFactory">
		<property name="rabbitMQConnectionFactory" ref="rabbitMQConnectionFactory" />
	</bean>
	<!-- 共通bean end -->

	<!-- mq注入、并设置初始值 -->
	<bean name="rabbitMQTemplate" class="com.service.mq.rabbitmq.template.RabbitMQTemplate">
		<property name="channelFactory" ref="rabbitMQChannelFactory" />
		<property name="exchange" value="default.exchange" />
		<property name="exchangeType" value="direct" />
		<!-- 服务器确认能找到queue,否则将消息返还给生产者 -->
		<property name="mandatory" value="true" />
		<!-- 服务器确认queue上有绑定消费者,否则将消息返还给生产者 -->
		<property name="immediate" value="false" />
		<!-- 是否支持消息确认机制，能确保消息的安全性，但相对消耗一些性能 -->
		<property name="confirmSelect" value="false" />
	</bean>

	<!-- 消费者委托类 -->
	<bean name="reportDelegate" class="com.service.mq.rabbitmq.delegate.ReportDelegate" />
	<bean name="smsDelegate" class="com.service.mq.rabbitmq.delegate.SmsDelegate" />

	<!-- 消费者 
	<bean class="com.service.mq.rabbitmq.consumer.RabbitMQConsumer">
		<property name="channelFactory" ref="rabbitMQChannelFactory" />
		<property name="delegate" ref="reportDelegate" />
		<property name="method" value="reportUser" />
		<property name="exchange" value="default.exchange" />
		<property name="exchangeType" value="direct" />
		<property name="routingKey" value="report.user.test.routingKey" />
		<property name="queueName" value="report.user.test.queue" />
	</bean>
	-->
	
	<!-- 段信息消费者 -->
	<bean class="com.service.mq.rabbitmq.consumer.RabbitMQConsumer">
		<property name="channelFactory" ref="rabbitMQChannelFactory" />
		<property name="delegate" ref="smsDelegate" />
		<property name="method" value="messageSend" />
		<property name="exchange" value="default.exchange" />
		<property name="exchangeType" value="direct" />
		<property name="routingKey" value="message.sms.routingKey" />
		<property name="queueName" value="message.sms.queue" />
	</bean>

</beans>
